name: Deploy Python Application with Docker

on:
  push:
    branches:
      - master  # Trigger workflow on pushes to the master branch

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest  # Use GitHub-hosted runner (or self-hosted)

    env:
      IMAGE_NAME: python-app  # Docker image name
      DOCKER_PORT: 8080       # Port exposed inside the container

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Python environment (Optional: Useful for running pre-checks/tests)
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x  # Replace with your project's Python version

      # Step 3: Install dependencies (optional, useful for pre-deployment tests)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 5: Log in to Docker Hub (or another container registry)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 6: Build and push Docker image
      - name: Build and push Docker image
        run: |
          docker build -t $IMAGE_NAME:latest .
          docker tag $IMAGE_NAME:latest ${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:latest

      # Step 7: Deploy Docker container locally (if applicable)
      - name: Deploy Docker container locally
        run: |
          docker stop $IMAGE_NAME || true
          docker rm $IMAGE_NAME || true
          docker run -d --name $IMAGE_NAME -p 80:$DOCKER_PORT ${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:latest
